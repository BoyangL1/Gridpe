import torch
import torch.nn as nn
import torch.nn.functional as F
from util import sample_and_group 
from gridAttn import GridCellPositionalEncoding

class Local_op(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(Local_op, self).__init__()
        self.conv1 = nn.Conv1d(in_channels, out_channels, kernel_size=1, bias=False)
        self.conv2 = nn.Conv1d(out_channels, out_channels, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm1d(out_channels)
        self.bn2 = nn.BatchNorm1d(out_channels)

    def forward(self, x):
        b, n, s, d = x.size()  # torch.Size([32, 512, 32, 6]) 
        x = x.permute(0, 1, 3, 2)   
        x = x.reshape(-1, d, s) 
        batch_size, _, N = x.size()
        x = F.relu(self.bn1(self.conv1(x))) # B, D, N
        x = F.relu(self.bn2(self.conv2(x))) # B, D, N
        x = F.adaptive_max_pool1d(x, 1).view(batch_size, -1)
        x = x.reshape(b, n, -1).permute(0, 2, 1)
        return x

class SA_Layer(nn.Module):
    def __init__(self, channels, heads=1, qk_dim=256):
        super(SA_Layer, self).__init__()
        self.q_conv = nn.Conv1d(channels, qk_dim, 1, bias=False)
        self.k_conv = nn.Conv1d(channels, qk_dim, 1, bias=False)
        self.v_conv = nn.Conv1d(channels, qk_dim, 1, bias=False)  # Changed: use qk_dim for V
        
        self.trans_conv = nn.Conv1d(channels, channels, 1)
        self.after_norm = nn.BatchNorm1d(channels)
        self.act = nn.ReLU()
        self.softmax = nn.Softmax(dim=-1)
        self.num_heads = heads
        self.qk_dim = qk_dim
        
        # Assuming GridCellPositionalEncoding handles position encoding for multi-head attention
        self.grid_pe = GridCellPositionalEncoding(
            dimension=3,
            qk_dim=qk_dim,
            num_heads=self.num_heads
        )

    def split_heads(self, x, num_heads):
        B, N, C = x.shape
        C_head = C // num_heads
        return x.view(B, N, num_heads, C_head).permute(0, 2, 1, 3)  # (B, H, N, C_head)

    def forward(self, x, xyz):
        B, C, N = x.shape

        x_q = self.q_conv(x).permute(0, 2, 1)  # (B, N, C)
        x_k = self.k_conv(x).permute(0, 2, 1)
        x_v = self.v_conv(x).permute(0, 2, 1)

        x_q = self.split_heads(x_q, self.num_heads)  # (B, H, N, C_head)
        x_k = self.split_heads(x_k, self.num_heads)
        x_v = self.split_heads(x_v, self.num_heads)

        x_q, x_k = self.grid_pe(xyz, x_q, x_k)  # 位置编码

        # Scaled dot-product attention
        C_head = x_q.shape[-1]
        x_q = x_q * (C_head ** -0.5)
        attn = torch.matmul(x_q, x_k.transpose(-2, -1))  # (B, H, N, N)
        attn = self.softmax(attn)
        attn = attn / (1e-9 + attn.sum(dim=-1, keepdim=True))

        x_r = torch.matmul(attn, x_v)  # (B, H, N, C_head)
        x_r = x_r.permute(0, 2, 1, 3).reshape(B, N, self.num_heads * C_head).permute(0, 2, 1)  # (B, D, N)

        x_r = self.act(self.after_norm(self.trans_conv(x - x_r)))
        x = x + x_r
        return x
    
class Point_Transformer_Last(nn.Module):
    def __init__(self, args, channels=256):
        super(Point_Transformer_Last, self).__init__()
        self.args = args
        self.conv1 = nn.Conv1d(channels, channels, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm1d(channels)

        self.sa1 = SA_Layer(channels)
        self.sa2 = SA_Layer(channels)
        self.sa3 = SA_Layer(channels)
        self.sa4 = SA_Layer(channels)

    def forward(self, x, xyz):
        # 
        # b, 3, npoint, nsample  
        # conv2d 3 -> 128 channels 1, 1
        # b * npoint, c, nsample 
        # permute reshape
        batch_size, _, N = x.size()
        # B, D, N
        x = F.relu(self.bn1(self.conv1(x)))
        x1 = self.sa1(x, xyz)
        x2 = self.sa2(x1, xyz)
        x3 = self.sa3(x2, xyz)
        x4 = self.sa4(x3, xyz)
        x = torch.cat((x1, x2, x3, x4), dim=1)

        return x

class PctGrid(nn.Module):
    def __init__(self, args, output_channels=40):
        super(PctGrid, self).__init__()
        self.args = args
        self.conv1 = nn.Conv1d(3, 64, kernel_size=1, bias=False)
        self.conv2 = nn.Conv1d(64, 64, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm1d(64)
        self.bn2 = nn.BatchNorm1d(64)
        self.gather_local_0 = Local_op(in_channels=128, out_channels=128)
        self.gather_local_1 = Local_op(in_channels=256, out_channels=256)

        self.pt_last = Point_Transformer_Last(args)

        self.conv_fuse = nn.Sequential(nn.Conv1d(1280, 1024, kernel_size=1, bias=False),
                                    nn.BatchNorm1d(1024),
                                    nn.LeakyReLU(negative_slope=0.2))

        self.linear1 = nn.Linear(1024, 512, bias=False)
        self.bn6 = nn.BatchNorm1d(512)
        self.dp1 = nn.Dropout(p=args.dropout)
        self.linear2 = nn.Linear(512, 256)
        self.bn7 = nn.BatchNorm1d(256)
        self.dp2 = nn.Dropout(p=args.dropout)
        self.linear3 = nn.Linear(256, output_channels)

    def forward(self, x):
        xyz = x.permute(0, 2, 1)
        batch_size, C, N = x.size()
        # B, D, N
        x = F.relu(self.bn1(self.conv1(x)))
        # B, D, N
        x = F.relu(self.bn2(self.conv2(x)))
        x = x.permute(0, 2, 1)
        new_xyz, new_feature = sample_and_group(npoint=N, radius=0.15, nsample=32, xyz=xyz, points=x)         
        feature_0 = self.gather_local_0(new_feature)
        feature = feature_0.permute(0, 2, 1)
        new_xyz, new_feature = sample_and_group(npoint=N//2, radius=0.2, nsample=32, xyz=new_xyz, points=feature) 
        feature_1 = self.gather_local_1(new_feature)

        x = self.pt_last(feature_1, new_xyz)
        x = torch.cat([x, feature_1], dim=1)
        x = self.conv_fuse(x)
        x = F.adaptive_max_pool1d(x, 1).view(batch_size, -1)
        x = F.leaky_relu(self.bn6(self.linear1(x)), negative_slope=0.2)
        x = self.dp1(x)
        x = F.leaky_relu(self.bn7(self.linear2(x)), negative_slope=0.2)
        x = self.dp2(x)
        x = self.linear3(x)

        return x